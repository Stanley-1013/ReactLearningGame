{
  "modules": [
    {
      "id": 1,
      "title": "What is React?",
      "description": "Learn the basic concepts and core features of React",
      "questions": [
        {
          "id": "1-1",
          "content": "React is a JavaScript library developed by Facebook for building user interfaces (UI). It allows developers to build web applications in a component-based way, where each component can be reused, making code more modular and maintainable.",
          "codeExample": "// A simple React component\nfunction Welcome() {\n  return <h1>Hello, React!</h1>;\n}\n\n// Using the component\n<Welcome />",
          "quiz": {
            "question": "What is React primarily used for?",
            "options": ["Building user interfaces", "Database management", "Server management", "Code compilation"],
            "answer": "Building user interfaces"
          },
          "media": {
            "image": "/src/assets/images/react-logo.png",
            "audio": "/src/assets/audio/intro-bgm.mp3"
          }
        },
        {
          "id": "1-2",
          "content": "React's core philosophy is component-based development. Each component is independent and reusable, making large applications more maintainable and scalable.",
          "codeExample": "// Component with props\nfunction UserProfile({ name, age }) {\n  return (\n    <div>\n      <h2>{name}</h2>\n      <p>Age: {age}</p>\n    </div>\n  );\n}\n\n<UserProfile name=\"John\" age={25} />",
          "quiz": {
            "question": "What is the main advantage of React components?",
            "options": ["Code reusability", "Smaller file size", "Faster network", "Less memory usage"],
            "answer": "Code reusability"
          },
          "media": {
            "image": "/src/assets/images/react-components.png",
            "audio": "/src/assets/audio/components-intro.mp3"
          }
        }
      ]
    },
    {
      "id": 2,
      "title": "Introduction to JSX",
      "description": "Master the basic usage of JSX syntax",
      "questions": [
        {
          "id": "2-1",
          "content": "JSX is a syntax extension for JavaScript that allows us to write HTML-like syntax within JavaScript. It makes React component writing more intuitive.",
          "codeExample": "// JSX syntax example\nconst element = <h1>Hello, World!</h1>;\n\n// Using JavaScript expressions in JSX\nconst name = 'React';\nconst greeting = <h1>Hello, {name}!</h1>;",
          "quiz": {
            "question": "What is JSX?",
            "options": ["JavaScript syntax extension", "A new programming language", "CSS framework", "Database language"],
            "answer": "JavaScript syntax extension"
          },
          "media": {
            "image": "/src/assets/images/jsx-example.png",
            "audio": "/src/assets/audio/jsx-explanation.mp3"
          }
        }
      ]
    },
    {
      "id": 3,
      "title": "Components Basics",
      "description": "Understand React components fundamentals",
      "questions": [
        {
          "id": "3-1",
          "content": "Components are the core concept of React. They are like reusable code blocks that return JSX to describe what the UI should look like.",
          "codeExample": "// Function component example\nfunction Button() {\n  return <button>Click me</button>;\n}\n\n// Using the component\nfunction App() {\n  return <Button />;\n}",
          "quiz": {
            "question": "What is the main purpose of React components?",
            "options": ["Building reusable UI elements", "Handling network requests", "Managing databases", "Compiling CSS"],
            "answer": "Building reusable UI elements"
          },
          "media": {
            "image": "/src/assets/images/components-diagram.png",
            "audio": "/src/assets/audio/components-intro.mp3"
          }
        }
      ]
    },
    {
      "id": 4,
      "title": "Props",
      "description": "Learn how to pass data between components",
      "questions": [
        {
          "id": "4-1",
          "content": "Props (properties) are how components pass data to each other, similar to function parameters.",
          "codeExample": "// Component receiving props\nfunction UserCard(props) {\n  return (\n    <div>\n      <h2>{props.name}</h2>\n      <p>Age: {props.age}</p>\n    </div>\n  );\n}\n\n// Passing props\n<UserCard name=\"Alice\" age={25} />",
          "quiz": {
            "question": "What is the characteristic of props?",
            "options": ["Read-only, cannot be modified", "Can be modified by child components", "Can only pass strings", "Only works in class components"],
            "answer": "Read-only, cannot be modified"
          },
          "media": {
            "image": "/src/assets/images/props-flow.png",
            "audio": "/src/assets/audio/props-explanation.mp3"
          }
        }
      ]
    },
    {
      "id": 5,
      "title": "State Management",
      "description": "Master component internal state management",
      "questions": [
        {
          "id": "5-1",
          "content": "State is component internal data. When state changes, React automatically re-renders the component. We use useState Hook in function components.",
          "codeExample": "import { useState } from 'react';\n\nfunction Counter() {\n  const [count, setCount] = useState(0);\n\n  return (\n    <div>\n      <p>Count: {count}</p>\n      <button onClick={() => setCount(count + 1)}>\n        +1\n      </button>\n    </div>\n  );\n}",
          "quiz": {
            "question": "What does useState Hook return?",
            "options": ["An array with state value and update function", "Only the state value", "Only the update function", "An object"],
            "answer": "An array with state value and update function"
          },
          "media": {
            "image": "/src/assets/images/state-diagram.png",
            "audio": "/src/assets/audio/state-management.mp3"
          }
        }
      ]
    },
    {
      "id": 6,
      "title": "Event Handling",
      "description": "Learn to handle user interaction events in React",
      "questions": [
        {
          "id": "6-1",
          "content": "React event handling is similar to HTML, but uses SyntheticEvent, which is React's wrapper around native DOM events.",
          "codeExample": "function Button() {\n  const handleClick = (event) => {\n    event.preventDefault();\n    alert('Button clicked!');\n  };\n\n  return (\n    <button onClick={handleClick}>\n      Click me\n    </button>\n  );\n}",
          "quiz": {
            "question": "What is React's event object called?",
            "options": ["SyntheticEvent", "NativeEvent", "ReactEvent", "DOMEvent"],
            "answer": "SyntheticEvent"
          },
          "media": {
            "image": "/src/assets/images/event-handling.png",
            "audio": "/src/assets/audio/events-explanation.mp3"
          }
        }
      ]
    },
    {
      "id": 7,
      "title": "Conditional Rendering",
      "description": "Learn to dynamically display different content based on conditions",
      "questions": [
        {
          "id": "7-1",
          "content": "Conditional rendering allows us to decide what content to render based on different conditions. Common methods include ternary operator and logical AND operator.",
          "codeExample": "function Greeting({ isLoggedIn, username }) {\n  return (\n    <div>\n      {isLoggedIn ? (\n        <h1>Welcome back, {username}!</h1>\n      ) : (\n        <h1>Please log in</h1>\n      )}\n      {isLoggedIn && <button>Logout</button>}\n    </div>\n  );\n}",
          "quiz": {
            "question": "Which is NOT a common conditional rendering method in React?",
            "options": ["switch statement", "ternary operator", "logical AND operator", "if statement"],
            "answer": "switch statement"
          },
          "media": {
            "image": "/src/assets/images/conditional-rendering.png",
            "audio": "/src/assets/audio/conditional-explanation.mp3"
          }
        }
      ]
    },
    {
      "id": 8,
      "title": "Lists and Keys",
      "description": "Learn how to render lists and understand the importance of keys",
      "questions": [
        {
          "id": "8-1",
          "content": "When rendering lists in React, we use the map() method to iterate through arrays. Each list item needs a unique key prop to help React optimize rendering performance.",
          "codeExample": "function TodoList({ todos }) {\n  return (\n    <ul>\n      {todos.map((todo) => (\n        <li key={todo.id}>\n          {todo.text}\n        </li>\n      ))}\n    </ul>\n  );\n}",
          "quiz": {
            "question": "Why do list items need key props?",
            "options": ["Help React optimize rendering performance", "Make CSS styles work correctly", "Prevent JavaScript errors", "Support accessibility features"],
            "answer": "Help React optimize rendering performance"
          },
          "media": {
            "image": "/src/assets/images/list-rendering.png",
            "audio": "/src/assets/audio/lists-and-keys.mp3"
          }
        }
      ]
    },
    {
      "id": 9,
      "title": "useEffect Hook",
      "description": "Learn to handle side effects and lifecycle",
      "questions": [
        {
          "id": "9-1",
          "content": "useEffect is a Hook for handling side effects, such as data fetching, subscriptions, or manually changing the DOM. It can execute specific operations after component rendering.",
          "codeExample": "import { useState, useEffect } from 'react';\n\nfunction Timer() {\n  const [seconds, setSeconds] = useState(0);\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setSeconds(prev => prev + 1);\n    }, 1000);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  return <div>Timer: {seconds} seconds</div>;\n}",
          "quiz": {
            "question": "When is the cleanup function in useEffect executed?",
            "options": ["When component unmounts or before next effect runs", "Only when component mounts", "Every state update", "Only when errors occur"],
            "answer": "When component unmounts or before next effect runs"
          },
          "media": {
            "image": "/src/assets/images/useeffect-lifecycle.png",
            "audio": "/src/assets/audio/useeffect-explanation.mp3"
          }
        }
      ]
    },
    {
      "id": 10,
      "title": "Forms and Controlled Components",
      "description": "Learn to handle forms and user input in React",
      "questions": [
        {
          "id": "10-1",
          "content": "In React, controlled component values are controlled by React state. Every input change triggers a state update, allowing us to validate input in real-time or dynamically update the UI.",
          "codeExample": "import { useState } from 'react';\n\nfunction ContactForm() {\n  const [name, setName] = useState('');\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    console.log('Submit:', name);\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input\n        value={name}\n        onChange={(e) => setName(e.target.value)}\n        placeholder=\"Name\"\n      />\n      <button type=\"submit\">Submit</button>\n    </form>\n  );\n}",
          "quiz": {
            "question": "What is the characteristic of controlled components?",
            "options": ["Value controlled by React state", "Value controlled by DOM", "No event handling needed", "Cannot validate input"],
            "answer": "Value controlled by React state"
          },
          "media": {
            "image": "/src/assets/images/controlled-components.png",
            "audio": "/src/assets/audio/forms-explanation.mp3"
          }
        }
      ]
    }
  ]
}