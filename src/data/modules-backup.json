{
  "modules": [
    {
      "id": 1,
      "title": "React 是什麼？",
      "description": "學習 React 的基本概念和核心特色",
      "questions": [
        {
          "id": "1-1",
          "content": "React 是由 Facebook 開發的 JavaScript 函式庫，專門用來建立使用者介面 (UI)。它讓開發者能夠用組件化的方式來建構網頁應用程式，每個組件都可以重複使用，讓程式碼更加模組化和易於維護。React 使用虛擬 DOM 來提升效能，只更新實際變更的部分。",
          "codeExample": "// 一個簡單的 React 組件\nfunction Welcome() {\n  return <h1>Hello, React!</h1>;\n}\n\n// 在應用程式中使用\n<Welcome />",
          "quiz": {
            "question": "React 主要是用來做什麼的？",
            "options": ["建立使用者介面", "處理資料庫", "管理伺服器", "編譯程式碼"],
            "answer": "建立使用者介面"
          },
          "media": {
            "image": "/src/assets/images/react-logo.png",
            "audio": "/src/assets/audio/intro-bgm.mp3"
          }
        },
        {
          "id": "1-2",
          "content": "React 的核心思想是組件化開發。每個組件都是獨立的、可重複使用的程式碼片段，具有自己的狀態和生命週期。這種架構讓大型應用程式的開發變得更加可維護和擴展。",
          "codeExample": "// React 組件的基本結構\nfunction UserProfile({ name, age }) {\n  return (\n    <div className=\"user-profile\">\n      <h2>{name}</h2>\n      <p>年齡: {age}</p>\n    </div>\n  );\n}\n\n// 使用組件\n<UserProfile name=\"小明\" age={25} />",
          "quiz": {
            "question": "React 組件化開發的主要優點是什麼？",
            "options": ["提高程式碼的重複使用性", "減少檔案大小", "提升網路速度", "降低記憶體使用"],
            "answer": "提高程式碼的重複使用性"
          },
          "media": {
            "image": "/src/assets/images/react-components.png",
            "audio": "/src/assets/audio/components-intro.mp3"
          }
        },
        {
          "id": "1-3",
          "content": "虛擬 DOM (Virtual DOM) 是 React 的核心技術之一。它是真實 DOM 的 JavaScript 表示，React 透過比較虛擬 DOM 的差異來最小化實際的 DOM 操作，大幅提升應用程式的效能。",
          "codeExample": "// React 如何處理狀態更新\nfunction Counter() {\n  const [count, setCount] = useState(0);\n  \n  // 當狀態改變時，React 會重新渲染組件\n  return (\n    <div>\n      <p>計數: {count}</p>\n      <button onClick={() => setCount(count + 1)}>\n        +1\n      </button>\n    </div>\n  );\n}",
          "quiz": {
            "question": "虛擬 DOM 的主要作用是什麼？",
            "options": ["優化效能，減少 DOM 操作", "儲存使用者資料", "處理網路請求", "管理路由"],
            "answer": "優化效能，減少 DOM 操作"
          },
          "media": {
            "image": "/src/assets/images/virtual-dom.png",
            "audio": "/src/assets/audio/virtual-dom.mp3"
          }
        }
      ]
    },
    {
      "id": 2,
      "title": "JSX 語法介紹",
      "description": "掌握 JSX 語法的基本使用方式",
      "questions": [
        {
          "id": "2-1",
          "content": "JSX 是 JavaScript 的語法擴充，讓我們可以在 JavaScript 中寫類似 HTML 的語法。JSX 讓 React 組件的撰寫更加直觀，因為它結合了 JavaScript 的邏輯能力和 HTML 的結構化表達。瀏覽器無法直接執行 JSX，所以需要透過 Babel 等工具轉換成標準的 JavaScript。",
          "codeExample": "// JSX 語法範例\nconst element = <h1>Hello, World!</h1>;\n\n// 在 JSX 中使用 JavaScript 表達式\nconst name = 'React';\nconst greeting = <h1>Hello, {name}!</h1>;\n\n// JSX 可以包含多個元素\nconst app = (\n  <div>\n    <h1>歡迎學習 React</h1>\n    <p>這是一個 JSX 範例</p>\n  </div>\n);",
          "quiz": {
            "question": "JSX 是什麼？",
            "options": ["JavaScript 的語法擴充", "一種新的程式語言", "CSS 框架", "資料庫語言"],
            "answer": "JavaScript 的語法擴充"
          },
          "media": {
            "image": "/src/assets/images/jsx-example.png",
            "audio": "/src/assets/audio/jsx-explanation.mp3"
          }
        },
        {
          "id": "2-2",
          "content": "在 JSX 中，我們使用大括號 {} 來嵌入 JavaScript 表達式。這讓我們可以動態地顯示資料、執行函數、或進行條件渲染。JSX 中的所有內容最終都會被轉換成 React.createElement() 的呼叫。",
          "codeExample": "// JSX 中的 JavaScript 表達式\nfunction WelcomeMessage({ username, isLoggedIn }) {\n  const currentTime = new Date().toLocaleTimeString();\n  \n  return (\n    <div>\n      {isLoggedIn ? (\n        <h1>歡迎回來, {username}！</h1>\n      ) : (\n        <h1>請先登入</h1>\n      )}\n      <p>現在時間: {currentTime}</p>\n      <p>2 + 3 = {2 + 3}</p>\n    </div>\n  );\n}",
          "quiz": {
            "question": "在 JSX 中如何嵌入 JavaScript 表達式？",
            "options": ["使用大括號 {}", "使用小括號 ()", "使用方括號 []", "使用雙引號 \"\""],
            "answer": "使用大括號 {}"
          },
          "media": {
            "image": "/src/assets/images/jsx-expressions.png",
            "audio": "/src/assets/audio/jsx-expressions.mp3"
          }
        }
      ]
    },
    {
      "id": 3,
      "title": "組件 (Components) 基礎",
      "content": "組件是 React 的核心概念，它就像是可重複使用的程式碼積木。組件可以是函式或類別，負責回傳 JSX 來描述畫面應該長什麼樣子。組件讓我們可以將複雜的 UI 拆分成多個小的、可管理的部分，每個組件都有自己的職責和狀態。",
      "codeExample": "// 函式組件 (推薦使用)\nfunction Button() {\n  return <button>點擊我</button>;\n}\n\n// 帶 props 的組件\nfunction Greeting(props) {\n  return <h1>Hello, {props.name}!</h1>;\n}\n\n// 使用組件\nfunction App() {\n  return (\n    <div>\n      <Greeting name=\"Alice\" />\n      <Button />\n    </div>\n  );\n}",
      "quiz": {
        "question": "React 組件的主要用途是什麼？",
        "options": ["建立可重複使用的 UI 元素", "處理網路請求", "管理資料庫", "編譯 CSS"],
        "answer": "建立可重複使用的 UI 元素"
      },
      "media": {
        "image": "/src/assets/images/components-diagram.png",
        "audio": "/src/assets/audio/components-intro.mp3"
      }
    },
    {
      "id": 4,
      "title": "Props 屬性傳遞",
      "content": "Props (properties) 是組件之間傳遞資料的方式，就像函式的參數一樣。父組件可以透過 props 將資料傳遞給子組件，讓組件變得更加靈活和可重複使用。Props 是唯讀的，子組件不能修改接收到的 props，這確保了資料流的單向性和可預測性。",
      "codeExample": "// 定義接收 props 的組件\nfunction UserCard(props) {\n  return (\n    <div className=\"user-card\">\n      <h2>{props.name}</h2>\n      <p>年齡: {props.age}</p>\n      <p>職業: {props.job}</p>\n    </div>\n  );\n}\n\n// 使用組件並傳遞 props\nfunction App() {\n  return (\n    <div>\n      <UserCard name=\"Alice\" age={25} job=\"工程師\" />\n      <UserCard name=\"Bob\" age={30} job=\"設計師\" />\n    </div>\n  );\n}",
      "quiz": {
        "question": "Props 的特性是什麼？",
        "options": ["唯讀的，不能被修改", "可以被子組件修改", "只能傳遞字串", "只能在類別組件中使用"],
        "answer": "唯讀的，不能被修改"
      },
      "media": {
        "image": "/src/assets/images/props-flow.png",
        "audio": "/src/assets/audio/props-explanation.mp3"
      }
    },
    {
      "id": 5,
      "title": "State 狀態管理",
      "content": "State 是組件內部的狀態資料，當 state 改變時，React 會自動重新渲染組件。在函式組件中，我們使用 useState Hook 來管理狀態。State 讓組件變得動態，能夠響應使用者的互動和其他事件。與 props 不同，state 是組件私有的，可以被組件自己修改。",
      "codeExample": "import { useState } from 'react';\n\nfunction Counter() {\n  // 宣告一個名為 count 的 state 變數\n  const [count, setCount] = useState(0);\n\n  return (\n    <div>\n      <p>你點擊了 {count} 次</p>\n      <button onClick={() => setCount(count + 1)}>\n        點擊 +1\n      </button>\n      <button onClick={() => setCount(0)}>\n        重置\n      </button>\n    </div>\n  );\n}",
      "quiz": {
        "question": "useState Hook 回傳什麼？",
        "options": ["一個陣列，包含狀態值和更新函式", "只有狀態值", "只有更新函式", "一個物件"],
        "answer": "一個陣列，包含狀態值和更新函式"
      },
      "media": {
        "image": "/src/assets/images/state-diagram.png",
        "audio": "/src/assets/audio/state-management.mp3"
      }
    },
    {
      "id": 6,
      "title": "事件處理 (Event Handling)",
      "content": "React 中的事件處理與 HTML 類似，但使用的是 SyntheticEvent，這是 React 對原生 DOM 事件的封裝。事件處理函式通常以 'on' 開頭，如 onClick、onChange 等。React 事件是跨瀏覽器相容的，並且支援事件委派 (Event Delegation) 來提升效能。",
      "codeExample": "function Button() {\n  // 事件處理函式\n  const handleClick = (event) => {\n    event.preventDefault();\n    alert('按鈕被點擊了！');\n  };\n\n  const handleMouseOver = () => {\n    console.log('滑鼠移入按鈕');\n  };\n\n  return (\n    <button \n      onClick={handleClick}\n      onMouseOver={handleMouseOver}\n    >\n      點擊我\n    </button>\n  );\n}",
      "quiz": {
        "question": "React 中的事件物件叫做什麼？",
        "options": ["SyntheticEvent", "NativeEvent", "ReactEvent", "DOMEvent"],
        "answer": "SyntheticEvent"
      },
      "media": {
        "image": "/src/assets/images/event-handling.png",
        "audio": "/src/assets/audio/events-explanation.mp3"
      }
    },
    {
      "id": 7,
      "title": "條件渲染 (Conditional Rendering)",
      "content": "條件渲染讓我們可以根據不同的條件來決定要渲染什麼內容。React 中常用的條件渲染方式包括：if 語句、三元運算子 (? :)、邏輯 AND 運算子 (&&) 等。這讓我們能夠建立動態的使用者介面，根據應用程式的狀態來顯示不同的內容。",
      "codeExample": "function Greeting({ isLoggedIn, username }) {\n  // 使用 if 語句\n  if (isLoggedIn) {\n    return <h1>歡迎回來, {username}!</h1>;\n  }\n  return <h1>請先登入</h1>;\n}\n\nfunction App() {\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  \n  return (\n    <div>\n      {/* 使用三元運算子 */}\n      {isLoggedIn ? (\n        <p>你已經登入了</p>\n      ) : (\n        <p>你尚未登入</p>\n      )}\n      \n      {/* 使用邏輯 AND */}\n      {isLoggedIn && <button>登出</button>}\n    </div>\n  );\n}",
      "quiz": {
        "question": "下列哪個不是 React 中常用的條件渲染方式？",
        "options": ["switch 語句", "三元運算子", "邏輯 AND 運算子", "if 語句"],
        "answer": "switch 語句"
      },
      "media": {
        "image": "/src/assets/images/conditional-rendering.png",
        "audio": "/src/assets/audio/conditional-explanation.mp3"
      }
    },
    {
      "id": 8,
      "title": "列表渲染與 Key",
      "content": "在 React 中渲染列表時，我們通常使用 JavaScript 的 map() 方法來遍歷陣列並回傳 JSX 元素。每個列表項目都需要一個唯一的 key 屬性，這幫助 React 識別哪些項目已更改、新增或刪除，從而優化渲染效能。Key 應該是穩定、可預測且在兄弟元素中唯一的。",
      "codeExample": "function TodoList({ todos }) {\n  return (\n    <ul>\n      {todos.map((todo) => (\n        <li key={todo.id}>\n          <span>{todo.text}</span>\n          <span>{todo.completed ? '✓' : '○'}</span>\n        </li>\n      ))}\n    </ul>\n  );\n}\n\n// 使用範例\nfunction App() {\n  const todos = [\n    { id: 1, text: '學習 React', completed: true },\n    { id: 2, text: '練習 JSX', completed: false },\n    { id: 3, text: '建立第一個 App', completed: false }\n  ];\n  \n  return <TodoList todos={todos} />;\n}",
      "quiz": {
        "question": "為什麼列表項目需要 key 屬性？",
        "options": ["幫助 React 優化渲染效能", "讓 CSS 樣式正確套用", "避免 JavaScript 錯誤", "支援無障礙功能"],
        "answer": "幫助 React 優化渲染效能"
      },
      "media": {
        "image": "/src/assets/images/list-rendering.png",
        "audio": "/src/assets/audio/lists-and-keys.mp3"
      }
    },
    {
      "id": 9,
      "title": "useEffect Hook",
      "content": "useEffect 是處理副作用 (side effects) 的 Hook，如資料獲取、訂閱、或手動更改 DOM。它相當於類別組件中的 componentDidMount、componentDidUpdate 和 componentWillUnmount 的組合。useEffect 會在每次渲染後執行，但可以透過相依陣列來控制執行時機。",
      "codeExample": "import { useState, useEffect } from 'react';\n\nfunction Timer() {\n  const [seconds, setSeconds] = useState(0);\n\n  useEffect(() => {\n    // 設定計時器 (副作用)\n    const interval = setInterval(() => {\n      setSeconds(prev => prev + 1);\n    }, 1000);\n\n    // 清理函式 (在組件卸載時執行)\n    return () => {\n      clearInterval(interval);\n    };\n  }, []); // 空的相依陣列表示只在掛載時執行一次\n\n  return <div>計時器: {seconds} 秒</div>;\n}",
      "quiz": {
        "question": "useEffect 的清理函式何時會被執行？",
        "options": ["組件卸載時或下次 effect 執行前", "只在組件掛載時", "每次狀態更新時", "只在發生錯誤時"],
        "answer": "組件卸載時或下次 effect 執行前"
      },
      "media": {
        "image": "/src/assets/images/useeffect-lifecycle.png",
        "audio": "/src/assets/audio/useeffect-explanation.mp3"
      }
    },
    {
      "id": 10,
      "title": "表單處理與受控組件",
      "content": "在 React 中，表單元素可以是受控組件或非受控組件。受控組件的值由 React state 控制，每次輸入變更都會觸發 state 更新。這種方式讓我們可以即時驗證輸入、格式化資料、或根據輸入動態更新其他部分的 UI。受控組件是 React 中處理表單的推薦方式。",
      "codeExample": "import { useState } from 'react';\n\nfunction ContactForm() {\n  const [formData, setFormData] = useState({\n    name: '',\n    email: '',\n    message: ''\n  });\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: value\n    }));\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    console.log('表單資料:', formData);\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input\n        name=\"name\"\n        value={formData.name}\n        onChange={handleChange}\n        placeholder=\"姓名\"\n      />\n      <input\n        name=\"email\"\n        value={formData.email}\n        onChange={handleChange}\n        placeholder=\"Email\"\n      />\n      <button type=\"submit\">送出</button>\n    </form>\n  );\n}",
      "quiz": {
        "question": "受控組件的特徵是什麼？",
        "options": ["值由 React state 控制", "值由 DOM 控制", "不需要事件處理", "不能驗證輸入"],
        "answer": "值由 React state 控制"
      },
      "media": {
        "image": "/src/assets/images/controlled-components.png",
        "audio": "/src/assets/audio/forms-explanation.mp3"
      }
    }
  ]
}